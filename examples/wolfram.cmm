// Wolfram epitech project in C--

fun getValueFromSubString(string str, int rule) : char
{
    int tmp = 0;
    if (str == "***") {
        tmp = 128;
    } else if (str == "** ") {
        tmp = 64;
    } else if (str == "* *") {
        tmp = 32;
    } else if (str == "*  ") {
        tmp = 16;
    } else if (str == " **") {
        tmp = 8;
    } else if (str == " * ") {
        tmp = 4;
    } else if (str == "  *") {
        tmp = 2;
    } else if (str == "   ") {
        tmp = 1;
    }

    if (rule & tmp) {
        return '*';
    } else {
        return ' ';
    }
}

fun getPrintLine(string line, int ogLineSize, int generatedLineNb) : string
{
    string printLine = "";
    // skip genetratedLineNb chars
    int i = 0;
    while (i < generatedLineNb) {
        i++;
    }
    i++;
    // print ogLineSize chars
    while (i <= ogLineSize + generatedLineNb) {
        printLine += line[i];
        i++;
    }
    return printLine;
}

// return the size of a string
fun strlen (string str) : int
{
    int i = 0;
    while (str[i] != '\0') {
        i++;
    }
    return i;
}

// return the number of a string
fun my_get_num (string str) : int
{
    int len = strlen(str);
    int num = 0;
    int i = 0;
    if (str[0] == '-') {
        i = 1;
    }
    for (; i < len; i++) {
        num *= 10;
        int a = (str[i]);
        num += a - 48;
    }
    if (str[0] == '-') {
        num = 0 - num;
    }
    return num;
}

fun main() : int
{
    int lineSize = 50;
    int ruleNb = 90; // 0 <= ruleNb <= 255
    int lineNb = 20; // number of lines to draw, negative nb for infinite

    print("Enter the line size (default 50): \n");
    string lineSizeStr = getline();
    if (strlen(lineSizeStr) > 0) {
        lineSize = my_get_num(lineSizeStr);
    }
    print("Enter the rule number (default 90): \n");
    string ruleNbStr = getline();
    if (strlen(ruleNbStr) > 0) {
        ruleNb = my_get_num(ruleNbStr);
    }
    print("Enter the number of lines to draw (default 20): \n");
    string lineNbStr = getline();
    if (strlen(lineNbStr) > 0) {
        lineNb = my_get_num(lineNbStr);
    }
    int ogLineSize = lineSize;
    int generatedLineNb = 0;

    if (lineSize < 1)
    {
        print("Error: lineSize must be greater than 0");
        return 1;
    }

    if (ruleNb < 0 || ruleNb > 255)
    {
        print("Error: ruleNb must be between 0 and 255");
        return 1;
    }

    // generate the first line
    string previousLine = "";

    for (int i = 0; i < lineSize; i++)
    {
        previousLine += ' ';
    }

    int middle = lineSize / 2;
    if (lineSize % 2 == 0) {
        middle -= 1;
    }

    previousLine[middle] = '*';

    // draw the first line
    print("\"");
    print(previousLine);
    print("\"");
    print("\n");

    lineNb--;

    // draw the other lines
    while (lineNb > 0) {
        string currentLine = " ";

        for (int i = 0; i < lineSize; i++)
        {
            string subString = "";
            for (int j = -1; j < 2; j++)
            {
                if (i - j < 0 || i - j >= lineSize - 2) {
                    subString += ' ';
                } else {
                    subString += previousLine[i - j];
                }
            }
            // reverse the substring
            char tmp = subString[2];
            subString[2] = subString[0];
            subString[0] = tmp;

            currentLine += getValueFromSubString(subString, ruleNb);
        }
        currentLine += ' ';
        lineSize += 2;

        print("\"");
        string printLine = getPrintLine(currentLine, ogLineSize, generatedLineNb);
        print(printLine);
        print("\"");
        print("\n");
        previousLine = currentLine;

        if (lineNb > 0) {
            lineNb--;
        }
        generatedLineNb++;
    }

    return 0;
}