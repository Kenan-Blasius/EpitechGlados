// 125

fun my_print_comb (void) : void
{
    for (int i = 0; i < 10; i++)
    {
        for (int j = i + 1; j < 10; j++)
        {
            for (int k = j + 1; k < 10; k++)
            {
                print(i);
                print(j);
                print(k);
                print("\n");
            }
        }
    }
}

fun my_print_comb2 (void) : void
{
    for (int i = 0; i < 100; i++)
    {
        for (int j = i + 1; j < 100; j++)
        {
            print(i / 10);
            print(i % 10);
            print(" ");
            print(j / 10);
            print(j % 10);
            print("\n");
        }
    }
}

fun my_compute_power_rec (int nb , int p) : int
{
    if (p < 0) {
        return 0;
    }
    if (p == 0) {
        return 1;
    }
    return nb * my_compute_power_rec(nb, (p - 1));
}

fun my_compute_square_root (int nb) : int
{
    int i = 0;
    while ((i * i) < nb) {
        i++;
    }
    if ((i * i) == nb) {
        return i;
    }
    return 0;
}

fun my_is_prime (int nb) : int
{
    if (nb <= 1) {
        return 0;
    }
    for (int i = 2; i < nb; i++) {
        if ((nb % i) == 0) {
            return 0;
        }
    }
    return 1;
}

fun my_find_prime_sup (int nb) : int
{
    while (my_is_prime(nb) == 0) {
        nb++;
    }
    return nb;
}


fun my_compute_factorial_rec (int nb) : int
{
    if (nb < 0) {
        return 0;
    }
    if (nb == 0) {
        return 1;
    }
    return nb * my_compute_factorial_rec(nb - 1);
}

fun int_to_str (int nb) : string
{
    string str = "";
    while (nb > 0) {
        char c = (nb % 10) + 48;
        str = c + str;
        nb = nb / 10;
    }
    return str;
}


fun main () : int
{
    int a = my_compute_power_rec(5, 3);
    return a;
}
